Notes: Complete Web Application for the college enrollment system
I've created a full-featured College Enrollment System web application that includes:
ðŸŽ¯ Features:
Three tabbed sections for Students, Courses, and Enrollments
Full CRUD operations for all entities
Forms that populate from the database for editing
Real-time statistics showing counts
Data validation on both client and server
Relationship handling - can't delete students/courses with active enrollments
Dropdown menus populated from database for enrollments
Responsive design with a clean, professional interface

ðŸš€ To Run:
Save the file as CollegeEnrollmentSystem.js
Update the MongoDB connection string with your credentials
Run:   node CollegeEnrollmentSystem.js
Open your browser to http://localhost:3000


ðŸ“± How It Works:

Students Tab: Add, edit, delete students with validation (Student ID must be S##### format)
Courses Tab: Manage courses with all details including max students
Enrollments Tab: Create enrollments by selecting from existing students and courses
Statistics: Live counts update as you make changes
Edit Mode: Click "Edit" on any row to populate the form for updating
Validation: Proper error messages for duplicate entries, invalid formats, etc.

ðŸŽ¨ UI Features:

Clean, modern design with tabs
Color-coded buttons (green for save, orange for edit, red for delete)
Success/error messages that auto-dismiss
Hover effects on table rows
Responsive layout that works on all screen sizes

The application preserves all your seed data and provides a complete interface for managing the college enrollment system.


### Testing the system:

Try deleting introduction to programming: It will not delete: 
Why?   Because there are enrollments in that course.

The application is preventing you from deleting the "Introduction to Programming" course because Henry Taylor (S10008) is enrolled in it for Winter 2025.
This is a referential integrity feature I built into the system. Look at this code in the delete route:

app.delete('/api/courses/:id', async (req, res) => {
    try {
        // Check if course has enrollments
        const enrollmentCount = await Enrollment.countDocuments({ course: req.params.id });
        
        if (enrollmentCount > 0) {
            return res.status(400).json({ 
                message: 'Cannot delete course with active enrollments. Remove enrollments first.' 
            });
        }
        // ... rest of delete logic


To delete the course, you have two options:
Option 1: Delete the enrollment first

Go to the Enrollments tab
Find Henry Taylor's enrollment in COMP1001
Click Delete on that enrollment
Go back to the Courses tab
Now you can delete "Introduction to Programming"

Option 2: Withdraw the student

Go to the Enrollments tab
Click Edit on Henry Taylor's enrollment
Change the grade from "In Progress" to "Withdrawn"
Save the enrollment
Then modify the code to allow deletion of courses with only withdrawn students

Why This Protection Exists:
This prevents:

Data orphaning - enrollments pointing to non-existent courses
Academic record loss - preserving student enrollment history
Accidental deletions - making sure you really want to remove a course with active students

If you want to change this behavior, we could:

Allow "soft delete" (mark as not offered instead of deleting)
Cascade delete (automatically remove all enrollments when deleting a course)
Only prevent deletion for "In Progress" enrollments
