How MongoDB's `$lookup` operator works for joining collections and how it interacts with `$unwind`, in this code:

## How `$lookup` Works

The `$lookup` operator performs a left outer join between two collections in MongoDB. Here's how it works:

### Basic `$lookup` Structure

```javascript
{
    $lookup: {
        from: 'students',        // Collection to join with
        localField: 'student',   // Field from current collection
        foreignField: '_id',     // Field from the "from" collection
        as: 'studentDetails'     // Name of output array field
    }
}
```

**Key Points:**
1. `$lookup` **always returns an array**, even for 1:1 relationships
2. It's similar to a SQL LEFT JOIN - documents without matches still appear
3. The "from" field uses the actual collection name (lowercase, plural by convention)

### Example from Lab 1:
```javascript
// Starting with enrollments collection
await Enrollment.aggregate([
    {
        $lookup: {
            from: 'students',
            localField: 'student',      // student field in enrollments
            foreignField: '_id',        // _id field in students
            as: 'studentDetails'        // creates array field
        }
    }
]);

// Result structure:
{
    _id: ObjectId("..."),
    student: ObjectId("..."),
    course: ObjectId("..."),
    semester: "Fall 2024",
    grade: "A",
    studentDetails: [  // Always an array!
        {
            _id: ObjectId("..."),
            studentId: "S10001",
            name: "John Doe",
            email: "john@college.edu",
            program: "Computer Science"
        }
    ]
}
```

## How `$lookup` Works with `$unwind`

Since `$lookup` returns an array, `$unwind` is often used to "flatten" the results, converting array fields into individual documents.

### The `$unwind` Process:

```javascript
// Before $unwind - studentInfo is an array
{
    semester: "Fall 2024",
    grade: "A",
    studentInfo: [{
        name: "John Doe",
        studentId: "S10001"
    }]
}

// After $unwind - studentInfo is now an object
{
    semester: "Fall 2024",
    grade: "A",
    studentInfo: {
        name: "John Doe",
        studentId: "S10001"
    }
}
```

### Complete Example from Lab 2:

```javascript
await Enrollment.aggregate([
    // Stage 1: Filter enrollments
    {
        $match: {
            semester: 'Fall 2024'
        }
    },
    
    // Stage 2: Join with students (creates array)
    {
        $lookup: {
            from: 'students',
            localField: 'student',
            foreignField: '_id',
            as: 'studentInfo'  // This is an array
        }
    },
    
    // Stage 3: Unwind the array (convert to object)
    {
        $unwind: {
            path: '$studentInfo',
            preserveNullAndEmptyArrays: true  // Keep documents without matches
        }
    },
    
    // Stage 4: Now you can access nested fields directly
    {
        $project: {
            studentName: '$studentInfo.name',  // Direct access after unwind
            studentId: '$studentInfo.studentId',
            semester: 1,
            grade: 1
        }
    }
]);

## Advanced `$lookup` with Sub-Pipeline

For complex joins with conditions, you can use a sub-pipeline inside `$lookup`:

```javascript
{
    $lookup: {
        from: 'enrollments',
        let: { studentId: '$_id' },  // Variables from current collection
        pipeline: [
            // Sub-pipeline with its own stages
            {
                $match: {
                    $expr: {
                        $and: [
                            { $eq: ['$student', '$$studentId'] },  // Join condition
                            { $in: ['$grade', ['A+', 'A', 'A-']] }  // Additional filter
                        ]
                    }
                }
            }
        ],
        as: 'highGradeEnrollments'
    }
}
```

## Key Differences and Use Cases

### When to Use Basic `$lookup`:
- Simple foreign key relationships
- When you need all matching documents
- Performance is a priority

### When to Use `$lookup` with `$unwind`:
- Creating flat, denormalized results
- When you expect exactly one match per document
- Preparing data for further processing that requires object access

### When to Use `$lookup` with Sub-Pipeline:
- Complex join conditions beyond simple equality
- Need to filter or transform joined data
- Multiple joins in a single operation
- Calculating aggregates on joined data

## Performance Considerations

1. **Basic `$lookup`** is generally faster than sub-pipeline lookups
2. `$unwind` can increase the number of documents in the pipeline
3. Use `preserveNullAndEmptyArrays: true` in `$unwind` to keep documents without matches
4. Place `$match` stages early in the pipeline to reduce data volume

The combination of `$lookup` and `$unwind` essentially mimics SQL JOIN behavior, transforming MongoDB's document-based structure into a more relational-style result set.


// MongoDB Aggregation Examples with $lookup
const mongoose = require('mongoose');

// MongoDB connection
const MONGODB_URI = 'mongodb+srv://xxx:xxx@xxx.mongodb.net/collegeDB?retryWrites=true&w=majority';

// Connect to MongoDB
mongoose.connect(MONGODB_URI);

// Connection event handlers
mongoose.connection.on('connected', () => {
    console.log('‚úÖ Connected to MongoDB Atlas');
});

mongoose.connection.on('error', (err) => {
    console.error('‚ùå MongoDB connection error:', err);
});

// Define schemas
const studentSchema = new mongoose.Schema({
    studentId: String,
    name: String,
    email: String,
    program: String
});

const courseSchema = new mongoose.Schema({
    courseCode: String,
    title: String,
    credits: Number,
    instructor: String,
    maxStudents: { type: Number, default: 30 }
});

const enrollmentSchema = new mongoose.Schema({
    student: { type: mongoose.Schema.Types.ObjectId, ref: 'Student' },
    course: { type: mongoose.Schema.Types.ObjectId, ref: 'Course' },
    semester: String,
    grade: String
});

// Create models
const Student = mongoose.model('Student', studentSchema);
const Course = mongoose.model('Course', courseSchema);
const Enrollment = mongoose.model('Enrollment', enrollmentSchema);

// ============================================
// Lab 1: Basic $lookup
// ============================================
async function basicLookupExample() {
    console.log('\n' + '='.repeat(80));
    console.log('üîç Lab 1: Basic $lookup - Finding Enrollments with Student Details');
    console.log('='.repeat(80) + '\n');
    
    try {
        const results = await Enrollment.aggregate([
            // Stage 1: $lookup - Join with students collection
            {
                $lookup: {
                    from: 'students',           // Collection to join
                    localField: 'student',      // Field in enrollments
                    foreignField: '_id',        // Field in students
                    as: 'studentDetails'        // Output array name
                }
            },
            
            // Stage 2: Limit results for readability
            {
                $limit: 3
            }
        ]);
        
        if (results.length === 0) {
            console.log('No enrollments found. Make sure you have run the seed script.');
            return;
        }
        
        console.log('üìä Raw aggregation result (first enrollment):');
        console.log(JSON.stringify(results[0], null, 2));
        
        console.log('\nüìã Formatted results:');
        results.forEach((enrollment, index) => {
            console.log(`\nEnrollment ${index + 1}:`);
            console.log(`  Semester: ${enrollment.semester}`);
            console.log(`  Grade: ${enrollment.grade}`);
            console.log(`  Student Details:`, enrollment.studentDetails[0] ? {
                name: enrollment.studentDetails[0].name,
                studentId: enrollment.studentDetails[0].studentId,
                email: enrollment.studentDetails[0].email
            } : 'No student found');
        });
        
        console.log('\nüí° Key Learning Points:');
        console.log('1. $lookup creates an array field (studentDetails) even for 1:1 relationships');
        console.log('2. The "from" field uses the collection name (lowercase, plural)');
        console.log('3. This is similar to a LEFT JOIN - enrollments without students still appear');
        
    } catch (error) {
        console.error('‚ùå Error in basicLookupExample:', error.message);
    }
}

// ============================================
// Lab 2: $lookup with $unwind
// ============================================
async function lookupWithUnwindExample() {
    console.log('\n' + '='.repeat(80));
    console.log('üîç Lab 2: $lookup with $unwind - Creating Flat Join Results');
    console.log('='.repeat(80) + '\n');
    
    try {
        const results = await Enrollment.aggregate([
            // Stage 1: Filter for Fall 2024 (like WHERE clause)
            {
                $match: {
                    semester: 'Fall 2024'
                }
            },
            
            // Stage 2: Join with students
            {
                $lookup: {
                    from: 'students',
                    localField: 'student',
                    foreignField: '_id',
                    as: 'studentInfo'
                }
            },
            
            // Stage 3: Unwind student array (convert array to single object)
            {
                $unwind: {
                    path: '$studentInfo',
                    preserveNullAndEmptyArrays: true
                }
            },
            
            // Stage 4: Join with courses
            {
                $lookup: {
                    from: 'courses',
                    localField: 'course',
                    foreignField: '_id',
                    as: 'courseInfo'
                }
            },
            
            // Stage 5: Unwind course array
            {
                $unwind: {
                    path: '$courseInfo',
                    preserveNullAndEmptyArrays: true
                }
            },
            
            // Stage 6: Project (select) only the fields we want
            {
                $project: {
                    _id: 0,  // Exclude the _id
                    studentName: '$studentInfo.name',
                    studentId: '$studentInfo.studentId',
                    courseCode: '$courseInfo.courseCode',
                    courseTitle: '$courseInfo.title',
                    credits: '$courseInfo.credits',
                    semester: 1,  // Include semester
                    grade: 1      // Include grade
                }
            },
            
            // Stage 7: Sort by student name
            {
                $sort: {
                    studentName: 1
                }
            }
        ]);
        
        if (results.length === 0) {
            console.log('No Fall 2024 enrollments found.');
            return;
        }
        
        console.log('üìä Fall 2024 Enrollment Report:');
        console.log('='.repeat(80));
        console.log('Student Name         | Student ID | Course    | Title                          | Grade');
        console.log('-'.repeat(80));
        
        results.forEach(enrollment => {
            console.log(
                `${(enrollment.studentName || 'Unknown').padEnd(20)} | ` +
                `${(enrollment.studentId || 'N/A').padEnd(10)} | ` +
                `${(enrollment.courseCode || 'N/A').padEnd(9)} | ` +
                `${(enrollment.courseTitle || 'N/A').padEnd(30)} | ` +
                `${enrollment.grade || 'N/A'}`
            );
        });
        
        console.log('\nüìà Statistics:');
        console.log(`Total enrollments in Fall 2024: ${results.length}`);
        
        console.log('\nüí° Key Learning Points:');
        console.log('1. $unwind converts array fields into individual documents');
        console.log('2. After $unwind, you can access nested fields directly');
        console.log('3. $project reshapes documents - like SELECT in SQL');
        console.log('4. Use 1 to include fields, 0 to exclude in $project');
        console.log('5. Pipeline stages execute in order - $match first improves performance');
        
    } catch (error) {
        console.error('‚ùå Error in lookupWithUnwindExample:', error.message);
    }
}

// ============================================
// Lab 3: Complex Predicate Joins
// ============================================
async function predicateJoinExample() {
    console.log('\n' + '='.repeat(80));
    console.log('üîç Lab 3: Complex Predicate Joins - Finding Dean\'s List Students');
    console.log('='.repeat(80) + '\n');
    
    try {
        const results = await Student.aggregate([
            // Stage 1: Start with students (different approach - start from students)
            {
                $lookup: {
                    from: 'enrollments',
                    let: { studentId: '$_id' },  // Variable from students
                    pipeline: [
                        // Sub-pipeline inside $lookup
                        {
                            $match: {
                                $expr: {
                                    $and: [
                                        { $eq: ['$student', '$$studentId'] },  // Join condition
                                        { $in: ['$grade', ['A+', 'A', 'A-']] }  // Grade predicate
                                    ]
                                }
                            }
                        }
                    ],
                    as: 'highGradeEnrollments'
                }
            },
            
            // Stage 2: Filter students with at least 2 A grades
            {
                $match: {
                    $expr: {
                        $gte: [{ $size: '$highGradeEnrollments' }, 2]
                    }
                }
            },
            
            // Stage 3: Join with courses for each enrollment
            {
                $lookup: {
                    from: 'courses',
                    let: { 
                        enrollments: '$highGradeEnrollments'
                    },
                    pipeline: [
                        {
                            $match: {
                                $expr: {
                                    $in: ['$_id', '$$enrollments.course']
                                }
                            }
                        }
                    ],
                    as: 'courses'
                }
            },
            
            // Stage 4: Create the final report
            {
                $project: {
                    _id: 0,
                    studentName: '$name',
                    studentId: '$studentId',
                    program: 1,
                    excellentGrades: { $size: '$highGradeEnrollments' },
                    courseCodes: {
                        $map: {
                            input: '$courses',
                            as: 'course',
                            in: '$$course.courseCode'
                        }
                    },
                    gradeDetails: {
                        $map: {
                            input: '$highGradeEnrollments',
                            as: 'enrollment',
                            in: {
                                grade: '$$enrollment.grade',
                                semester: '$$enrollment.semester'
                            }
                        }
                    }
                }
            },
            
            // Stage 5: Sort by number of excellent grades
            {
                $sort: {
                    excellentGrades: -1,
                    studentName: 1
                }
            }
        ]);
        
        if (results.length === 0) {
            console.log('No students found with 2+ excellent grades (A-, A, A+).');
            return;
        }
        
        console.log('üèÜ Dean\'s List Report - Students with 2+ Excellent Grades (A-, A, A+)');
        console.log('='.repeat(80));
        
        results.forEach((student, index) => {
            console.log(`\n${index + 1}. ${student.studentName} (${student.studentId})`);
            console.log(`   Program: ${student.program}`);
            console.log(`   Excellent Grades: ${student.excellentGrades}`);
            console.log(`   Courses: ${student.courseCodes.join(', ')}`);
            console.log(`   Grade Details:`);
            student.gradeDetails.forEach(detail => {
                console.log(`     - ${detail.grade} in ${detail.semester}`);
            });
        });
        
        console.log('\nüí° Key Learning Points:');
        console.log('1. $lookup can have a sub-pipeline for complex join conditions');
        console.log('2. Use "let" to pass variables into the sub-pipeline');
        console.log('3. $$variable (double $) references variables from "let"');
        console.log('4. $expr allows complex expressions in $match');
        console.log('5. This is equivalent to SQL JOIN with WHERE conditions');
        console.log('6. $map transforms arrays - like Array.map() in JavaScript');
        
    } catch (error) {
        console.error('‚ùå Error in predicateJoinExample:', error.message);
    }
}

// ============================================
// Lab 4: Aggregation with $group
// ============================================
async function groupStatisticsExample() {
    console.log('\n' + '='.repeat(80));
    console.log('üîç Lab 4: Aggregation with $group - Course Statistics Report');
    console.log('='.repeat(80) + '\n');
    
    try {
        const results = await Course.aggregate([
            // Stage 1: Join with enrollments
            {
                $lookup: {
                    from: 'enrollments',
                    localField: '_id',
                    foreignField: 'course',
                    as: 'enrollments'
                }
            },
            
            // Stage 2: Add calculated fields for each course
            {
                $addFields: {
                    // Total enrolled (excluding withdrawn)
                    totalEnrolled: {
                        $size: {
                            $filter: {
                                input: '$enrollments',
                                as: 'enrollment',
                                cond: { $ne: ['$$enrollment.grade', 'Withdrawn'] }
                            }
                        }
                    },
                    
                    // Count withdrawn students
                    withdrawnCount: {
                        $size: {
                            $filter: {
                                input: '$enrollments',
                                as: 'enrollment',
                                cond: { $eq: ['$$enrollment.grade', 'Withdrawn'] }
                            }
                        }
                    },
                    
                    // Calculate capacity percentage
                    capacityUsed: {
                        $multiply: [
                            {
                                $divide: [
                                    {
                                        $size: {
                                            $filter: {
                                                input: '$enrollments',
                                                as: 'e',
                                                cond: { $ne: ['$$e.grade', 'Withdrawn'] }
                                            }
                                        }
                                    },
                                    { $ifNull: ['$maxStudents', 30] }  // Default to 30 if null
                                ]
                            },
                            100
                        ]
                    }
                }
            },
            
            // Stage 3: Calculate grade distribution
            {
                $addFields: {
                    gradeDistribution: {
                        A: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $in: ['$$e.grade', ['A+', 'A', 'A-']] }
                                }
                            }
                        },
                        B: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $in: ['$$e.grade', ['B+', 'B', 'B-']] }
                                }
                            }
                        },
                        C: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $in: ['$$e.grade', ['C+', 'C', 'C-']] }
                                }
                            }
                        },
                        DF: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $in: ['$$e.grade', ['D', 'F']] }
                                }
                            }
                        },
                        InProgress: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $eq: ['$$e.grade', 'In Progress'] }
                                }
                            }
                        }
                    }
                }
            },
            
            // Stage 4: Project final output
            {
                $project: {
                    _id: 0,
                    courseCode: 1,
                    title: 1,
                    instructor: 1,
                    credits: 1,
                    maxStudents: { $ifNull: ['$maxStudents', 30] },
                    totalEnrolled: 1,
                    withdrawnCount: 1,
                    capacityUsed: { $round: ['$capacityUsed', 1] },
                    availableSeats: { 
                        $subtract: [
                            { $ifNull: ['$maxStudents', 30] }, 
                            '$totalEnrolled'
                        ] 
                    },
                    gradeDistribution: 1,
                    status: {
                        $switch: {
                            branches: [
                                { case: { $gte: ['$capacityUsed', 100] }, then: 'FULL' },
                                { case: { $gte: ['$capacityUsed', 80] }, then: 'Nearly Full' },
                                { case: { $gte: ['$capacityUsed', 50] }, then: 'Available' },
                                { case: { $lt: ['$capacityUsed', 50] }, then: 'Many Seats' }
                            ],
                            default: 'Unknown'
                        }
                    }
                }
            },
            
            // Stage 5: Sort by capacity used (descending)
            {
                $sort: {
                    capacityUsed: -1
                }
            }
        ]);
        
        if (results.length === 0) {
            console.log('No courses found.');
            return;
        }
        
        console.log('üìä Course Enrollment Statistics Report');
        console.log('='.repeat(100));
        
        results.forEach(course => {
            console.log(`\nüìö ${course.courseCode}: ${course.title}`);
            console.log(`   Instructor: ${course.instructor} | Credits: ${course.credits}`);
            console.log(`   Enrollment: ${course.totalEnrolled}/${course.maxStudents} (${course.capacityUsed}% full) - ${course.status}`);
            console.log(`   Available Seats: ${course.availableSeats}`);
            console.log(`   Withdrawn: ${course.withdrawnCount}`);
            
            console.log(`   Grade Distribution:`);
            console.log(`     A's: ${course.gradeDistribution.A} | B's: ${course.gradeDistribution.B} | ` +
                       `C's: ${course.gradeDistribution.C} | D/F: ${course.gradeDistribution.DF} | ` +
                       `In Progress: ${course.gradeDistribution.InProgress}`);
        });
        
        // Summary statistics using $group
        const summary = await Course.aggregate([
            {
                $lookup: {
                    from: 'enrollments',
                    localField: '_id',
                    foreignField: 'course',
                    as: 'enrollments'
                }
            },
            {
                $group: {
                    _id: null,
                    totalCourses: { $sum: 1 },
                    totalSeats: { $sum: { $ifNull: ['$maxStudents', 30] } },
                    totalEnrollments: {
                        $sum: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $ne: ['$$e.grade', 'Withdrawn'] }
                                }
                            }
                        }
                    },
                    avgClassSize: {
                        $avg: {
                            $size: {
                                $filter: {
                                    input: '$enrollments',
                                    as: 'e',
                                    cond: { $ne: ['$$e.grade', 'Withdrawn'] }
                                }
                            }
                        }
                    }
                }
            }
        ]);
        
        console.log('\nüìà Overall Summary:');
        if (summary[0]) {
            console.log(`   Total Courses: ${summary[0].totalCourses}`);
            console.log(`   Total Seats Available: ${summary[0].totalSeats}`);
            console.log(`   Total Enrollments: ${summary[0].totalEnrollments}`);
            console.log(`   Average Class Size: ${summary[0].avgClassSize.toFixed(1)}`);
            console.log(`   Overall Capacity: ${((summary[0].totalEnrollments / summary[0].totalSeats) * 100).toFixed(1)}%`);
        }
        
        console.log('\nüí° Key Learning Points:');
        console.log('1. $filter creates subsets of arrays based on conditions');
        console.log('2. $addFields adds computed fields without removing existing ones');
        console.log('3. $switch is like a switch statement for conditional logic');
        console.log('4. $group aggregates multiple documents into summary documents');
        console.log('5. Complex calculations can be done within the aggregation pipeline');
        
    } catch (error) {
        console.error('‚ùå Error in groupStatisticsExample:', error.message);
    }
}

// ============================================
// Lab 5: Advanced Multi-Collection Join
// ============================================
async function studentTranscriptExample() {
    console.log('\n' + '='.repeat(80));
    console.log('üîç Lab 5: Advanced Multi-Collection Join - Student Transcripts with GPA');
    console.log('='.repeat(80) + '\n');
    
    try {
        // Get a specific student's ID first
        let targetStudent = await Student.findOne({ studentId: 'S10001' });
        
        if (!targetStudent) {
            console.log('Student S10001 not found. Using first available student...');
            targetStudent = await Student.findOne();
            if (!targetStudent) {
                console.log('No students found in database!');
                return;
            }
        }
        
        const transcripts = await Student.aggregate([
            // Stage 1: Match specific student
            {
                $match: {
                    _id: targetStudent._id
                }
            },
            
            // Stage 2: Join with enrollments
            {
                $lookup: {
                    from: 'enrollments',
                    let: { studentId: '$_id' },
                    pipeline: [
                        {
                            $match: {
                                $expr: { $eq: ['$student', '$$studentId'] }
                            }
                        },
                        // Sub-pipeline: Join each enrollment with course details
                        {
                            $lookup: {
                                from: 'courses',
                                localField: 'course',
                                foreignField: '_id',
                                as: 'courseDetails'
                            }
                        },
                        {
                            $unwind: '$courseDetails'
                        },
                        // Calculate grade points for each course
                        {
                            $addFields: {
                                gradePoint: {
                                    $switch: {
                                        branches: [
                                            { case: { $eq: ['$grade', 'A+'] }, then: 4.0 },
                                            { case: { $eq: ['$grade', 'A'] }, then: 4.0 },
                                            { case: { $eq: ['$grade', 'A-'] }, then: 3.7 },
                                            { case: { $eq: ['$grade', 'B+'] }, then: 3.3 },
                                            { case: { $eq: ['$grade', 'B'] }, then: 3.0 },
                                            { case: { $eq: ['$grade', 'B-'] }, then: 2.7 },
                                            { case: { $eq: ['$grade', 'C+'] }, then: 2.3 },
                                            { case: { $eq: ['$grade', 'C'] }, then: 2.0 },
                                            { case: { $eq: ['$grade', 'C-'] }, then: 1.7 },
                                            { case: { $eq: ['$grade', 'D'] }, then: 1.0 },
                                            { case: { $eq: ['$grade', 'F'] }, then: 0 }
                                        ],
                                        default: null  // For 'In Progress' or 'Withdrawn'
                                    }
                                },
                                qualityPoints: {
                                    $cond: {
                                        if: { $in: ['$grade', ['In Progress', 'Withdrawn']] },
                                        then: 0,
                                        else: {
                                            $multiply: [
                                                '$courseDetails.credits',
                                                {
                                                    $switch: {
                                                        branches: [
                                                            { case: { $eq: ['$grade', 'A+'] }, then: 4.0 },
                                                            { case: { $eq: ['$grade', 'A'] }, then: 4.0 },
                                                            { case: { $eq: ['$grade', 'A-'] }, then: 3.7 },
                                                            { case: { $eq: ['$grade', 'B+'] }, then: 3.3 },
                                                            { case: { $eq: ['$grade', 'B'] }, then: 3.0 },
                                                            { case: { $eq: ['$grade', 'B-'] }, then: 2.7 },
                                                            { case: { $eq: ['$grade', 'C+'] }, then: 2.3 },
                                                            { case: { $eq: ['$grade', 'C'] }, then: 2.0 },
                                                            { case: { $eq: ['$grade', 'C-'] }, then: 1.7 },
                                                            { case: { $eq: ['$grade', 'D'] }, then: 1.0 },
                                                            { case: { $eq: ['$grade', 'F'] }, then: 0 }
                                                        ],
                                                        default: 0
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    ],
                    as: 'enrollmentHistory'
                }
            },
            
            // Stage 3: Calculate transcript summary
            {
                $addFields: {
                    // Separate completed courses from in-progress
                    completedCourses: {
                        $filter: {
                            input: '$enrollmentHistory',
                            as: 'enrollment',
                            cond: {
                                $not: {
                                    $in: ['$$enrollment.grade', ['In Progress', 'Withdrawn']]
                                }
                            }
                        }
                    },
                    inProgressCourses: {
                        $filter: {
                            input: '$enrollmentHistory',
                            as: 'enrollment',
                            cond: { $eq: ['$$enrollment.grade', 'In Progress'] }
                        }
                    }
                }
            },
            
            // Stage 4: Calculate GPA and other metrics
            {
                $addFields: {
                    totalCreditsAttempted: {
                        $sum: {
                            $map: {
                                input: '$completedCourses',
                                as: 'course',
                                in: '$$course.courseDetails.credits'
                            }
                        }
                    },
                    totalQualityPoints: {
                        $sum: {
                            $map: {
                                input: '$completedCourses',
                                as: 'course',
                                in: '$$course.qualityPoints'
                            }
                        }
                    },
                    currentCredits: {
                        $sum: {
                            $map: {
                                input: '$inProgressCourses',
                                as: 'course',
                                in: '$$course.courseDetails.credits'
                            }
                        }
                    }
                }
            },
            
            // Stage 5: Final projection with GPA calculation
            {
                $project: {
                    studentInfo: {
                        studentId: '$studentId',
                        name: '$name',
                        email: '$email',
                        program: '$program'
                    },
                    academicSummary: {
                        totalCreditsCompleted: '$totalCreditsAttempted',
                        currentlyEnrolledCredits: '$currentCredits',
                        cumulativeGPA: {
                            $cond: {
                                if: { $eq: ['$totalCreditsAttempted', 0] },
                                then: 0,
                                else: {
                                    $round: [
                                        { $divide: ['$totalQualityPoints', '$totalCreditsAttempted'] },
                                        2
                                    ]
                                }
                            }
                        },
                        totalCourses: { $size: '$enrollmentHistory' },
                        completedCourses: { $size: '$completedCourses' },
                        inProgressCourses: { $size: '$inProgressCourses' }
                    },
                    courseHistory: {
                        $map: {
                            input: '$enrollmentHistory',
                            as: 'enrollment',
                            in: {
                                semester: '$$enrollment.semester',
                                courseCode: '$$enrollment.courseDetails.courseCode',
                                courseTitle: '$$enrollment.courseDetails.title',
                                credits: '$$enrollment.courseDetails.credits',
                                instructor: '$$enrollment.courseDetails.instructor',
                                grade: '$$enrollment.grade',
                                gradePoints: '$$enrollment.gradePoint'
                            }
                        }
                    }
                }
            }
        ]);
        
        // Display the transcript
        if (transcripts.length > 0) {
            const transcript = transcripts[0];
            
            console.log('üìú OFFICIAL TRANSCRIPT');
            console.log('='.repeat(80));
            console.log(`Student: ${transcript.studentInfo.name}`);
            console.log(`ID: ${transcript.studentInfo.studentId}`);
            console.log(`Email: ${transcript.studentInfo.email}`);
            console.log(`Program: ${transcript.studentInfo.program}`);
            console.log('-'.repeat(80));
            
            console.log('\nüìä Academic Summary:');
            console.log(`Cumulative GPA: ${transcript.academicSummary.cumulativeGPA}`);
            console.log(`Total Credits Completed: ${transcript.academicSummary.totalCreditsCompleted}`);
            console.log(`Currently Enrolled Credits: ${transcript.academicSummary.currentlyEnrolledCredits}`);
            console.log(`Courses Completed: ${transcript.academicSummary.completedCourses}`);
            console.log(`Courses In Progress: ${transcript.academicSummary.inProgressCourses}`);
            
            console.log('\nüìö Course History:');
            console.log('-'.repeat(80));
            
            // Group courses by semester for display
            const coursesBySemester = {};
            transcript.courseHistory.forEach(course => {
                if (!coursesBySemester[course.semester]) {
                    coursesBySemester[course.semester] = [];
                }
                coursesBySemester[course.semester].push(course);
            });
            
            Object.keys(coursesBySemester).sort().forEach(semester => {
                console.log(`\n${semester}:`);
                coursesBySemester[semester].forEach(course => {
                    const gradePoints = course.gradePoints !== null ? course.gradePoints.toFixed(1) : 'N/A';
                    console.log(
                        `  ${course.courseCode.padEnd(10)} | ` +
                        `${course.courseTitle.padEnd(35)} | ` +
                        `${course.credits} credits | ` +
                        `Grade: ${course.grade.padEnd(11)} | ` +
                        `Points: ${gradePoints}`
                    );
                });
            });
        } else {
            console.log('No transcript data found for the student.');
        }
        
        console.log('\nüí° Key Learning Points:');
        console.log('1. Nested $lookup allows joining multiple collections in sub-pipelines');
        console.log('2. $reduce can create complex data structures during aggregation');
        console.log('3. $map transforms arrays similar to JavaScript Array.map()');
        console.log('4. Complex GPA calculations can be done entirely in the pipeline');
        console.log('5. This single aggregation replaces multiple SQL queries with JOINs');
        console.log('6. Sub-pipelines in $lookup can have their own multi-stage logic');
        
    } catch (error) {
        console.error('‚ùå Error in studentTranscriptExample:', error.message);
    }
}

// Main function to run all examples
async function main() {
    try {
        // Wait for connection to be established
        await new Promise(resolve => {
            if (mongoose.connection.readyState === 1) {
                resolve();
            } else {
                mongoose.connection.once('open', resolve);
            }
        });
        
        console.log('\nüöÄ Starting MongoDB Aggregation Examples...\n');
        console.log('üìå Make sure you have run the seed script to populate data!\n');
        
        // Check if we have data
        const studentCount = await Student.countDocuments();
        const courseCount = await Course.countDocuments();
        const enrollmentCount = await Enrollment.countDocuments();
        
        console.log(`üìä Current database state:`);
        console.log(`   Students: ${studentCount}`);
        console.log(`   Courses: ${courseCount}`);
        console.log(`   Enrollments: ${enrollmentCount}\n`);
        
        if (studentCount === 0 || courseCount === 0 || enrollmentCount === 0) {
            console.log('‚ö†Ô∏è  Warning: Database appears to be empty. Please run the seed script first.');
            console.log('   Run: node seed-data.js\n');
        }
        
        // Run all examples
        await basicLookupExample();
        await lookupWithUnwindExample();
        await predicateJoinExample();
        await groupStatisticsExample();
        await studentTranscriptExample();
        
        console.log('\n‚úÖ All aggregation examples completed!');
        
    } catch (error) {
        console.error('‚ùå Fatal error:', error);
    } finally {
        // Close the connection
        await mongoose.connection.close();
        console.log('\nüëã Connection closed');
    }
}

// Run the main function
main();
